port(Switch.class, "switchServer").requires(Monitor_3.class, "switchServer");
port(Monitor_3.class, "switchServer").requires(Switch.class, "switchServer");
port(Monitor_3.class, "switchServer").accepts(Switch.class, "switchServer");
port(Switch.class, "switchServer").accepts(Monitor_3.class, "switchServer");

port(Monitor_3.class, "receiveSwitchConfirm").requires(Switch.class, "switchConfirm");
port(Switch.class, "switchConfirm").requires(Monitor_3.class, "receiveSwitchConfirm");
port(Switch.class, "switchConfirm").accepts(Monitor_3.class, "receiveSwitchConfirm");
port(Monitor_3.class, "receiveSwitchConfirm").accepts(Switch.class, "switchConfirm");

port(Monitor_3.class, "addDatabase").requires(HerokuController.class, "addDatabase");
port(HerokuController.class, "addDatabase").requires(Monitor_3.class, "addDatabase");
port(HerokuController.class, "addDatabase").accepts(Monitor_3.class, "addDatabase");
port(Monitor_3.class, "addDatabase").accepts(HerokuController.class, "addDatabase");

data(HerokuController.class,"HerokuController2Monitor_3_data").to(Monitor_3.class,"HerokuController2Monitor_3_data");
/*
In Monitor_3.java:
	@Guard(name="can_add_database_through")
	public boolean can_add_database_through(@Data(name="HerokuController2Monitor_3_data") HerokuController HerokuController_ins) {}In Monitor_3.java:
	@Guard(name="is_reached_the_threshold")
	public boolean is_reached_the_threshold() {}
*/
