{"configuration": {"Peer": ["p1", "p"], "Tracker": ["TP012ptt", "TP02listenptt", "t", "TP02speakptt"]}, "constraints": [["p_is_registered_to_TP012ptt", {"is_registered_to": ["p", "TP012ptt"]}], ["p_is_registered_to_TP02speakptt", {"is_registered_to": ["p", "TP02speakptt"]}], ["p1_is_registered_to_TP02speakptt", {"is_registered_to": ["p1", "TP02speakptt"]}], ["p1_is_different_with_p", {"is_different_with": ["p1", "p"]}], ["p_is_registered_to_TP02listenptt", {"is_registered_to": ["p", "TP02listenptt"]}], ["p1_is_registered_to_TP02listenptt", {"is_registered_to": ["p1", "TP02listenptt"]}], ["p1_is_different_with_p", {"is_different_with": ["p1", "p"]}]], "actions": [["p_register", {"register": ["p"]}], ["t_log", {"log": ["t"]}], ["p_unregister", {"unregister": ["p"]}], ["TP012ptt_log", {"log": ["TP012ptt"]}], ["t_log", {"log": ["t"]}], ["p_register", {"register": ["p"]}], ["p_unregister", {"unregister": ["p"]}], ["TP02speakptt_broadcast", {"broadcast": ["TP02speakptt"]}], ["p_speak", {"speak": ["p"]}], ["~p1_speak", {"speak": ["p1"]}], ["p_speak", {"speak": ["p"]}], ["p_listen", {"listen": ["p"]}], ["TP02listenptt_broadcast", {"broadcast": ["TP02listenptt"]}], ["p_listen", {"listen": ["p"]}], ["p1_listen", {"listen": ["p1"]}]], "boolean_functions": ["In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_different_with\")\n\tpublic boolean is_different_with(Peer Peer_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_different_with\")\n\tpublic boolean is_different_with(Peer Peer_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}"], "data_transfer": ["data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");", "data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");", "data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");"], "pbl_formulas": "TP_01_1 = ((t_log => (p_register)))\nTP_01_2 = ((TP012ptt_log => (p_is_registered_to_TP012ptt & p_unregister)))\nTP_01_3 = ((p_register => (t_log)) & (p_unregister => (t_log)))\nTP_02_speak = ((p_speak => (p1_is_registered_to_TP02speakptt & p1_is_different_with_p & ~p1_speak & p_is_registered_to_TP02speakptt & TP02speakptt_broadcast)))\nTP_02_mutex = (p_speak XOR p_listen)\nTP_02_listen = ((p_listen => (p_is_registered_to_TP02listenptt & TP02listenptt_broadcast))) & ((p1_listen => (p1_is_registered_to_TP02listenptt & p1_is_different_with_p & p_is_registered_to_TP02listenptt & TP02listenptt_broadcast)))\n"}