{"configuration": {"Peer": ["p1", "TP03listen1tp", "TP03listentp", "TP03speaktp", "p"], "Tracker": ["TP05listenptt", "TP05speakptt", "t"]}, "constraints": [["TP03speaktp_is_registered_to_t", {"is_registered_to": ["TP03speaktp", "t"]}], ["p1_is_registered_to_t", {"is_registered_to": ["p1", "t"]}], ["p1_is_different_with_TP03speaktp", {"is_different_with": ["p1", "TP03speaktp"]}], ["TP03listentp_is_registered_to_t", {"is_registered_to": ["TP03listentp", "t"]}], ["TP03listen1tp_is_registered_to_t", {"is_registered_to": ["TP03listen1tp", "t"]}], ["p1_is_registered_to_t", {"is_registered_to": ["p1", "t"]}], ["p1_is_different_with_TP03listen1tp", {"is_different_with": ["p1", "TP03listen1tp"]}], ["p_is_registered_to_t", {"is_registered_to": ["p", "t"]}], ["p_is_registered_to_TP05listenptt", {"is_registered_to": ["p", "TP05listenptt"]}], ["p_is_registered_to_TP05speakptt", {"is_registered_to": ["p", "TP05speakptt"]}], ["p1_is_registered_to_TP05speakptt", {"is_registered_to": ["p1", "TP05speakptt"]}], ["p1_is_different_with_p", {"is_different_with": ["p1", "p"]}]], "actions": [["p_register", {"register": ["p"]}], ["t_log", {"log": ["t"]}], ["p_unregister", {"unregister": ["p"]}], ["t_log", {"log": ["t"]}], ["t_broadcast", {"broadcast": ["t"]}], ["TP03speaktp_speak", {"speak": ["TP03speaktp"]}], ["~p1_speak", {"speak": ["p1"]}], ["t_broadcast", {"broadcast": ["t"]}], ["TP03listentp_listen", {"listen": ["TP03listentp"]}], ["t_broadcast", {"broadcast": ["t"]}], ["TP03listen1tp_listen", {"listen": ["TP03listen1tp"]}], ["p1_listen", {"listen": ["p1"]}], ["t_broadcast", {"broadcast": ["t"]}], ["~p_speak", {"speak": ["p"]}], ["~p_listen", {"listen": ["p"]}], ["p_unregister", {"unregister": ["p"]}], ["~p_speak", {"speak": ["p"]}], ["~p_listen", {"listen": ["p"]}], ["TP05listenptt_broadcast", {"broadcast": ["TP05listenptt"]}], ["p_listen", {"listen": ["p"]}], ["TP05speakptt_broadcast", {"broadcast": ["TP05speakptt"]}], ["p_speak", {"speak": ["p"]}], ["~p1_speak", {"speak": ["p1"]}]], "boolean_functions": ["In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_different_with\")\n\tpublic boolean is_different_with(Peer Peer_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_different_with\")\n\tpublic boolean is_different_with(Peer Peer_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_registered_to\")\n\tpublic boolean is_registered_to(@Data(name=\"Tracker2Peer_data\") Tracker Tracker_ins) {}", "In Peer.java:\n\t@Guard(name=\"is_different_with\")\n\tpublic boolean is_different_with(Peer Peer_ins) {}"], "data_transfer": ["data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");", "data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");", "data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");", "data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");", "data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");", "data(Tracker.class,\"Tracker2Peer_data\").to(Peer.class,\"Tracker2Peer_data\");"], "pbl_formulas": "TP_01 = p_register <=> t_log\nTP_02 = p_unregister <=> t_log\nTP_03_speak = ((TP03speaktp_speak => (TP03speaktp_is_registered_to_t & p1_is_registered_to_t & p1_is_different_with_TP03speaktp & ~p1_speak & t_broadcast)))\nTP_03_listen = ((TP03listentp_listen => (TP03listentp_is_registered_to_t & t_broadcast)))\nTP_03_listen1 = ((TP03listen1tp_listen => (TP03listen1tp_is_registered_to_t & p1_is_registered_to_t & p1_is_different_with_TP03listen1tp & p1_listen & t_broadcast)) & (p1_listen => (TP03listen1tp_is_registered_to_t & TP03listen1tp_listen & p1_is_registered_to_t & p1_is_different_with_TP03listen1tp & t_broadcast)))\nTP_04 = ((p_unregister => (~p_speak & t_broadcast)) | (p_unregister => (~p_listen & t_broadcast)))\nTP_05_mutex = (~p_speak | ~p_listen )\nTP_05_listen = ((p_listen => (TP05listenptt_broadcast & p_is_registered_to_TP05listenptt)))\nTP_05_speak = ((p_speak => (p1_is_registered_to_TP05speakptt & p1_is_different_with_p & ~p1_speak & TP05speakptt_broadcast & p_is_registered_to_TP05speakptt)))\nMain_Exp: TP_01 & TP_02 & TP_03"}